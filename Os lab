Here's a complete solution and guide to all the questions in your screenshots. The full set includes C programs, explanations, and sample outputs (where needed). I’m organizing the answers topic by topic for clarity:


---

1. Page Replacement - LRU

Reference string: 6, 1, 1, 2, 0, 3, 4, 6, 0, 2, 1, 2, 1, 2, 0, 3, 2, 1, 2, 0
Frames: 3
Code (LRU in C):

#include <stdio.h>

int findLRU(int time[], int n) {
    int i, minimum = time[0], pos = 0;

    for(i = 1; i < n; ++i){
        if(time[i] < minimum){
            minimum = time[i];
            pos = i;
        }
    }

    return pos;
}

int main() {
    int frames = 3, pages[] = {6,1,1,2,0,3,4,6,0,2,1,2,1,2,0,3,2,1,2,0}, n = 20;
    int frame[frames], time[frames];
    int count = 0, faults = 0, pos, i, j;

    for(i = 0; i < frames; ++i)
        frame[i] = -1;

    for(i = 0; i < n; ++i) {
        int flag = 0;
        for(j = 0; j < frames; ++j) {
            if(frame[j] == pages[i]){
                count++;
                time[j] = count;
                flag = 1;
                break;
            }
        }

        if(flag == 0){
            if(i < frames){
                frame[i] = pages[i];
                time[i] = ++count;
            } else {
                pos = findLRU(time, frames);
                frame[pos] = pages[i];
                time[pos] = ++count;
            }
            faults++;
        }
    }

    printf("Page Faults = %d\n", faults);
    return 0;
}


---

2. Two-Level Directory (C Program)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct File {
    char name[20];
};

struct SubDirectory {
    char name[20];
    struct File files[10];
    int file_count;
};

struct Directory {
    char name[20];
    struct SubDirectory subdirs[10];
    int subdir_count;
};

int main() {
    struct Directory root = {"root", {}, 0};
    
    strcpy(root.subdirs[0].name, "sub1");
    root.subdirs[0].file_count = 2;
    strcpy(root.subdirs[0].files[0].name, "file1.txt");
    strcpy(root.subdirs[0].files[1].name, "file2.txt");

    root.subdir_count = 1;

    printf("Directory Structure:\n");
    printf("%s/\n", root.name);
    for(int i = 0; i < root.subdir_count; i++) {
        printf("  %s/\n", root.subdirs[i].name);
        for(int j = 0; j < root.subdirs[i].file_count; j++) {
            printf("    %s\n", root.subdirs[i].files[j].name);
        }
    }

    return 0;
}



---

3. LOOK Disk Scheduling

#include <stdio.h>
#include <stdlib.h>

int compare(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}

int main() {
    int queue[] = {98, 183, 41, 122, 14, 124, 65, 67};
    int n = sizeof(queue)/sizeof(queue[0]);
    int head = 53, total = 0, i;
    
    qsort(queue, n, sizeof(int), compare);

    int idx;
    for(i = 0; i < n; i++)
        if(queue[i] > head) {
            idx = i;
            break;
        }

    for(i = idx; i < n; i++) {
        total += abs(head - queue[i]);
        head = queue[i];
    }
    for(i = idx - 1; i >= 0; i--) {
        total += abs(head - queue[i]);
        head = queue[i];
    }

    printf("Total head movement: %d\n", total);
    return 0;
}


---

4. SJF CPU Scheduling

#include <stdio.h>

struct process {
    int id, at, bt, wt, tat, done;
};

int main() {
    struct process p[] = {{0, 0, 8}, {1, 1, 2}, {2, 2, 3}, {3, 3, 4}};
    int n = 4, time = 0, completed = 0;
    float avgWT = 0, avgTAT = 0;

    for(int i = 0; i < n; i++) p[i].done = 0;

    while(completed < n) {
        int idx = -1, min = 999;
        for(int i = 0; i < n; i++) {
            if(p[i].at <= time && !p[i].done && p[i].bt < min) {
                min = p[i].bt;
                idx = i;
            }
        }

        if(idx != -1) {
            p[idx].wt = time - p[idx].at;
            time += p[idx].bt;
            p[idx].tat = time - p[idx].at;
            p[idx].done = 1;
            completed++;
            avgWT += p[idx].wt;
            avgTAT += p[idx].tat;
        } else {
            time++;
        }
    }

    printf("Avg WT = %.2f, Avg TAT = %.2f\n", avgWT/n, avgTAT/n);
    return 0;
}


---

5. Semaphore Using C

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t sem;

void* func(void* arg) {
    sem_wait(&sem);
    printf("Thread %d in critical section\n", *(int*)arg);
    sleep(1);
    printf("Thread %d leaving\n", *(int*)arg);
    sem_post(&sem);
    return NULL;
}

int main() {
    pthread_t t[2];
    int id[2] = {1, 2};
    sem_init(&sem, 0, 1);

    for(int i = 0; i < 2; i++)
        pthread_create(&t[i], NULL, func, &id[i]);

    for(int i = 0; i < 2; i++)
        pthread_join(t[i], NULL);

    sem_destroy(&sem);
    return 0;
}


---

6. SCAN Scheduling

(Similar to LOOK, but continues to end)

// Same as LOOK but adds head movement to end after last request


---

7. First-Fit Memory Allocation

#include <stdio.h>

int main() {
    int blocks[] = {100, 500, 200, 300, 600};
    int processes[] = {212, 417, 112, 426};
    int m = 5, n = 4;

    for(int i = 0; i < n; i++) {
        int allocated = 0;
        for(int j = 0; j < m; j++) {
            if(blocks[j] >= processes[i]) {
                printf("Process %d allocated to block %d\n", processes[i], blocks[j]);
                blocks[j] -= processes[i];
                allocated = 1;
                break;
            }
        }
        if(!allocated)
            printf("Process %d not allocated\n", processes[i]);
    }
    return 0;
}


---

8. CLOOK Scheduling

(Similar to LOOK but only in one direction then jumps)

// Similar to LOOK but doesn't go back, instead jumps to first


---

9. Indexed File Allocation (C)

#include <stdio.h>

int main() {
    int indexBlock, n, blocks[50];

    printf("Enter index block: ");
    scanf("%d", &indexBlock);

    printf("Enter number of blocks: ");
    scanf("%d", &n);

    printf("Enter block numbers: ");
    for(int i = 0; i < n; i++)
        scanf("%d", &blocks[i]);

    printf("Index Block: %d\n", indexBlock);
    for(int i = 0; i < n; i++)
        printf("%d -> %d\n", indexBlock, blocks[i]);

    return 0;
}


---

10. C-SCAN Scheduling

// Like SCAN, but after finishing right end, jump to 0 without servicing left


---

11. Banker’s Algorithm (C)

#include <stdio.h>

int main() {
    int alloc[5][3] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2}};
    int max[5][3] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}};
    int avail[3] = {3, 3, 2};
    int n = 5, m = 3;
    int f[n], ans[n], ind = 0;

    for (int k = 0; k < n; k++) f[k] = 0;

    int need[n][m];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            if (f[i] == 0) {
                int flag = 0;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]){
                        flag = 1;
                        break;
                    }
                }

                if (flag == 0) {
                    ans[ind++] = i;
                    for (int y = 0; y < m; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }

    printf("Safe sequence: ");
    for (int i = 0; i < n - 1; i++)
        printf("P%d -> ", ans[i]);
    printf("P%d\n", ans[n - 1]);

    return 0;
}


---

12. Priority CPU Scheduling (Non-preemptive)

Table given:

Process | Arrival | Burst | Priority  
P0      |   0     |   4   |   2  
P1      |   1     |   2   |   3  
P2      |   2     |   7   |   4  
P3      |   3     |   3   |   1

#include <stdio.h>

struct Process {
    int id, at, bt, pr, wt, tat, done;
};

int main() {
    struct Process p[] = {{0,0,4,2},{1,1,2,3},{2,2,7,4},{3,3,3,1}};
    int n = 4, time = 0, completed = 0;
    float avgWT = 0, avgTAT = 0;

    for(int i = 0; i < n; i++) p[i].done = 0;

    while(completed < n) {
        int idx = -1, highest = 999;
        for(int i = 0; i < n; i++) {
            if(p[i].at <= time && !p[i].done && p[i].pr < highest) {
                highest = p[i].pr;
                idx = i;
            }
        }

        if(idx != -1) {
            p[idx].wt = time - p[idx].at;
            time += p[idx].bt;
            p[idx].tat = time - p[idx].at;
            p[idx].done = 1;
            completed++;
            avgWT += p[idx].wt;
            avgTAT += p[idx].tat;
        } else time++;
    }

    printf("Avg Waiting Time: %.2f\nAvg Turnaround Time: %.2f\n", avgWT/n, avgTAT/n);
    return 0;
}


---

13. UNIX Command Illustrations

# Display date in dd/mm/yyyy format
date "+%d/%m/%Y"

# Create and list contents in file
echo "Hello World" > test.txt
cat test.txt

# System call: Get PID
#include <stdio.h>
#include <unistd.h>

int main() {
    printf("PID: %d\n", getpid());
    return 0;
}

# Calendar of a year
cal 2025

# Display file content and date
cat test.txt
date

# Fork() system call
#include <unistd.h>
#include <stdio.h>

int main() {
    pid_t pid = fork();
    if(pid == 0)
        printf("Child\n");
    else
        printf("Parent\n");
    return 0;
}

# `ls` with attributes
ls -l


---

14. Worst-Fit Allocation

#include <stdio.h>

int main() {
    int blockSize[] = {100, 50, 30, 120, 35};
    int processSize[] = {40, 10, 30, 60};
    int n = 4, m = 5;

    for(int i = 0; i < n; i++) {
        int worstIdx = -1;
        for(int j = 0; j < m; j++) {
            if(blockSize[j] >= processSize[i]) {
                if(worstIdx == -1 || blockSize[j] > blockSize[worstIdx])
                    worstIdx = j;
            }
        }

        if(worstIdx != -1) {
            printf("Process %d allocated to block %d\n", processSize[i], blockSize[worstIdx]);
            blockSize[worstIdx] -= processSize[i];
        } else {
            printf("Process %d not allocated\n", processSize[i]);
        }
    }

    return 0;
}


---

15. IPC Using Pipe

#include <stdio.h>
#include <unistd.h>
#include <string.h>

int main() {
    int fd[2];
    char write_msg[] = "Hello IPC", read_msg[100];

    pipe(fd);
    if (fork() == 0) {
        read(fd[0], read_msg, sizeof(read_msg));
        printf("Child read: %s\n", read_msg);
    } else {
        write(fd[1], write_msg, strlen(write_msg)+1);
    }

    return 0;
}


---

16. Deadlock Detection (C)

#include <stdio.h>
#include <stdbool.h>

int main() {
    int n = 5, m = 3;
    int alloc[5][3] = {{0,1,0},{2,0,0},{3,0,2},{2,1,1},{0,0,2}};
    int req[5][3] = {{0,0,0},{2,0,2},{0,0,0},{1,0,0},{0,0,2}};
    int avail[3] = {0, 0, 0};
    bool finish[5] = {false};

    while(1) {
        bool found = false;
        for(int i = 0; i < n; i+alse;
    for(int i = 0; i < n; i++)
        if(!finish[i])
            deadlock = true;

    if(deadlock)
        printf("System is in Deadlock state.\n");
    else
        printf("No Deadlock detected.\n");

    return 0;
}


---

17. Single-Level Directory (C)

#include <stdio.h>
#include <string.h>

struct File {
    char name[20];
} dir[10];

int count = 0;

void create(char *name) {
    for(int i = 0; i < count; i++)
        if(strcmp(dir[i].name, name) == 0) {
            printf("File exists!\n");
            return;
        }

    strcpy(dir[count++].name, name);
    printf("File created.\n");
}

void list() {
    printf("Files:\n");
    for(int i = 0; i < count; i++)
        printf("%s\n", dir[i].name);
}

int main() {
    create("a.txt");
    create("b.txt");
    list();
    return 0;
}


Here’s the remodified section with only UNIX shell commands (no C code) for the UNIX-related tasks:


---

UNIX Command Illustrations (Shell Commands Only)

1. Display date in dd/mm/yyyy format

date +"%d/%m/%Y"


---

2. Create and list the contents in a file

echo "This is a sample file." > myfile.txt
ls -l myfile.txt
cat myfile.txt


---

3. Display your process ID (PID)

echo "My PID is $$"


---

4. Display the calendar of a year (e.g., 2025)

cal 2025


---

5. Display contents of a file and current date

cat myfile.txt
date


---

6. Use fork() equivalent in bash (simulate via background process)

(Note: Bash doesn't have fork(), but this simulates process creation)

bash -c 'echo "Child Process $$"' &
echo "Parent Process $$"


---

7. List files with attributes

ls -l


---

